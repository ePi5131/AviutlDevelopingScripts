--track0:sizeX,0,3000,1920
--track1:sizeY,0,3000,1080
--track2:CHG(%),0,100,100
--track3:AF(%),0,5000,0
--dialog:å¬ï ëŒâû/chk,local isIndv=1;å¬êî(îÒå¬ï ),local objnums=5;seed,local seed=777;

----------------
-- class definition
----------------

local Point = {}
Point.new = function(x, y)
    local o = {}
    o.x = x
    o.y = y
    o.returnCoordinate = function(self)
        return {self.x, self.y}
    end
    return o
end
local Area = {}
Area.new = function(x1, y1, x2, y2)
    return {
        range = {
            {x1, y1},
            {x2, y2}
        },
        points = {
            Point.new(x1, y1),
            Point.new(x2, y1),
            Point.new(x2, y2),
            Point.new(x1, y2)
        }
    }
end

----------------

local sizeX, sizeY, changeAF, seedAF = obj.track0, obj.track1, obj.track2 / 100, obj.track3 / 100
-- sizeX, sizeY = math.max(0, sizeX - obj.w), math.max(0, sizeY - obj.h)
-- print(sizeX, sizeY)
local range = Area.new(0, 0, sizeX, sizeY)
local n = isIndv == 1 and obj.num or objnums
-- lua 5.1ÇÃmath.logÇÕeÇ™íÍå≈íËÇÁÇµÇ¢
-- local depth = math.ceil(math.log(n, 2))
local depth = math.ceil(math.log(n) / math.log(2))
local areas = {range}
local dimention = 2
local function axis(n)
    return n % dimention
end

-- Partition the region based on the idea of kd-tree.
if obj.index == 0 then
    for i = 0, depth - 1 do
        local tmp = {}
        for j = 1, math.pow(2, i) do
            local a = areas[j]
            local min, max = a.range[1][axis(i) + 1], a.range[2][axis(i) + 1]
            local partition = obj.rand(min, max, j, seed + i)

            local x1min, x1max, x2min, x2max =
                unpack(
                axis(i) == 0 and {min, partition, partition, max} or
                    {
                        a.points[1].x,
                        a.points[3].x,
                        a.points[1].x,
                        a.points[3].x
                    }
            )
            local y1min, y1max, y2min, y2max =
                unpack(
                axis(i) == 1 and {min, partition, partition, max} or
                    {
                        a.points[1].y,
                        a.points[3].y,
                        a.points[1].y,
                        a.points[3].y
                    }
            )
            -- print("\tx:", x1min, x1max, x2min, x2max)
            -- print("\ty:", y1min, y1max, y2min, y2max)
            tmp[2 * j - 1] = Area.new(x1min, y1min, x1max, y1max)
            tmp[2 * j] = Area.new(x2min, y2min, x2max, y2max)
        end
        areas = tmp
        -- print(i, areas[1])
    end

    if isIndv == 1 then
        Aodaruma_PF_CalcedArea = areas
    end
end

----------------
local z = 0
local function drawpoly(area)
    local a = area
    local ps = a.points
    local coords = {}
    local x, y, w, h = obj.ox + obj.x, obj.oy + obj.y, obj.w, obj.h
    local inicoords = {0, 0, z, w, 0, z, w, h, z, 0, h, z}
    for i, p in ipairs(ps) do
        -- linear affect
        table.insert(
            coords,
            (p.x - sizeX / 2 - obj.ox) * changeAF + (inicoords[i * 3 - 2] - w / 2 + x) * (1 - changeAF)
        )
        table.insert(
            coords,
            (p.y - sizeY / 2 - obj.oy) * changeAF + (inicoords[i * 3 - 1] - h / 2 + y) * (1 - changeAF)
        )
        table.insert(coords, z)
    end
    return obj.drawpoly(unpack(coords))
end

if isIndv == 1 then
    local a = Aodaruma_PF_CalcedArea
    obj.effect()
    drawpoly(a[obj.index + 1])
else
    obj.copybuffer("tmp", "obj")
    for i = 1, n do
        obj.load("tempbuffer")
        drawpoly(areas[i])
    end
end
